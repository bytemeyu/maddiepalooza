services:
  api:
    build: ./backend/api
    #constrói uma imagem a partir do Dockerfile no diretório especificado
    ports:
      - "3000:3000"
    restart: unless-stopped
    env_file:
      - ./backend/api/.env.api
    volumes:
      - ./backend/api:/app
      #indica um mapeamento de volumes entre o host e o (:) container. usamos /app no container pois muitas imagens Docker já predefinem /app como o diretório de trabalho.
    networks:
      - network
    depends_on:
      - database

  database:
    image: postgres:16.3
    restart: unless-stopped
    env_file:
      - ./backend/.env.db
    volumes:
      - database:/var/lib/postgresql/data
      #indica o nome (será "nome-do-projeto-web-nome-definido-aqui") do volume a ser criado e gerenciado pelo Docker e o (:) caminho dentro do container onde o volume será montado. essa configuração garante a persistência de dados.
    networks:
      - network
      #indica o nome da rede a ser criada e gerenciada pelo Docker

  frontend:
    build: ./frontend/maddiepalooza-vite
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://149.28.42.49:3000
      - NODE_ENV=production
    restart: unless-stopped
    volumes:
      - ./frontend/maddiepalooza-vite:/app
      - /app/node_modules
      #Ao criar um volume anônimo para node_modules, você garante que as instalações ou atualizações de pacotes realizadas dentro do container não afetam o diretório node_modules no seu sistema de arquivos do host. Isso evita conflitos e problemas potenciais caso você também execute comandos npm diretamente no host.
    networks:
      - network
    depends_on:
      - api

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      #porta para HTTP
      - "443:443"
      #porta para HTTPS
    volumes:
      - ./nginx:/etc/nginx
      #mapeia toda a pasta nginx e seu conteúdo
    depends_on:
      - api
      - frontend
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  database:
