version: '2.28.1'

services:

  api:
    build: ./backend/api
    #constrói uma imagem a partir do Dockerfile no diretório especificado 
    ports:
      - "3000:3000"
    restart: unless-stopped
    env_file:
      - ./backend/api/.env.api
      - ./backend/api/.env.test.api  
      #esta última linha para carregar as variáveis de ambiente específicas para testes
    volumes:
      - ./backend/api:/app
      #indica um mapeamento de volumes entre o host e o (:) container. usamos /app no container pois muitas imagens Docker já predefinem /app como o diretório de trabalho.
    networks:
      - network
    depends_on:
      - database
      - database_test
      #adicionando o serviço de database de testes
    
  database:
    image: postgres:16.3
    restart: unless-stopped
    env_file:
      - ./backend/.env.db
    volumes:
      - database:/var/lib/postgresql/data
      #indica o nome (será "nome_do_projeto_web_nome_definido_aqui") do volume a ser criado e gerenciado pelo Docker e o (:) caminho dentro do container onde o volume será montado. essa configuração garante a persistência de dados.
    networks:
      - network
      #indica o nome da rede a ser criada e gerenciada pelo Docker

  #o serviço para banco de dados de teste
  database_test:
    image: postgres:16.3
    restart: unless-stopped
    env_file:
      - ./backend/.env.db.test
    volumes:
      - database_test:/var/lib/postgresql/data
    networks:
      - network

  frontend:
    build: ./frontend/maddiepalooza-vite
    ports:
      - "5173:5173"
    restart: unless-stopped
    volumes:
      - ./frontend/maddiepalooza-vite:/app
      - /app/node_modules 
      #Ao criar um volume anônimo para node_modules, você garante que as instalações ou atualizações de pacotes realizadas dentro do container não afetam o diretório node_modules no seu sistema de arquivos do host. Isso evita conflitos e problemas potenciais caso você também execute comandos npm diretamente no host.
    networks:
      - network
    depends_on:
      - api
    
networks:
  network:
    driver: bridge

volumes:
  database:
  database_test:
  #volume para o banco de dados de teste
