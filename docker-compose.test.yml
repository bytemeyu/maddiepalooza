services:
  #o serviço para api que roda banco de dados de teste:
  api-test:
    image: maddiepalooza-api
    ports:
      - "3000:3000"
    #o serviço api-test usa o mesmo Dockerfile que o serviço api, mas substitui o comando de início (npm start) pelo comando de teste (npm run test).
    #O contêiner de teste pode rodar sem expor portas, já que a comunicação dentro do Docker (entre contêineres) não depende do mapeamento de portas externas.
    env_file:
      - ./backend/api/.env.api.test
    volumes:
      - ./backend/api:/app
    networks:
      - network-test
    depends_on:
      - database-test

  #o serviço para banco de dados de teste:
  database-test:
    image: postgres:16.3
    restart: unless-stopped
    env_file:
      - ./backend/.env.db.test
    volumes:
      - database-test:/var/lib/postgresql/data
    networks:
      - network-test

  frontend-test:
    image: maddiepalooza-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000
      - NODE_ENV=test
    restart: unless-stopped
    volumes:
      - ./frontend/maddiepalooza-vite:/app
      - /app/node_modules
      #Ao criar um volume anônimo para node_modules, você garante que as instalações ou atualizações de pacotes realizadas dentro do container não afetam o diretório node_modules no seu sistema de arquivos do host. Isso evita conflitos e problemas potenciais caso você também execute comandos npm diretamente no host.
    networks:
      - network-test
    depends_on:
      - api-test

networks:
  network-test:
    driver: bridge

volumes:
  database-test:
